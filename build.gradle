plugins {
    id "java-library"
    id "idea"
    id "org.springframework.boot" version "${springBootVersion}"
    id "org.sonarqube" version "${sonarQubeVersion}"
}

description "마이리얼트립 숙박 ohmyhotel ota 연동 프로젝트"
defaultTasks("build")

sonarqube {
    properties {
        property "sonar.projectKey", "${sonarQubeProjectKey}"
        property "sonar.host.url", "${sonarQubeHost}"
        property "sonar.login", "${sonarQubeLoginToken}"
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true;
}

allprojects {
    group = ext.projectGroup
    version = ext.baseVersion + ext.snapshotVersion

    repositories {
        maven {
            url "https://nexus.dev-myrealtrip.net/repository/maven-public/"
        }
        mavenCentral()
    }

    clean.doLast {
        file('src/main/generated').deleteDir()
        file('out').deleteDir()
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "io.spring.dependency-management"

    def javaVersion = JavaVersion.VERSION_11

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }

        sourceSets*.resources.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
        dependencies {
            dependency("org.projectlombok:lombok:${lombokVersion}")
        }

    }

    dependencies {
        // JetBrains Annotation Processor
        compileOnly("org.jetbrains:annotations:${jetBrainAnnotationsVersion}")
        annotationProcessor("org.jetbrains:annotations:${jetBrainAnnotationsVersion}")

        // Mapstruct
        implementation("org.mapstruct:mapstruct:${mapstructVersion}")
        implementation("org.projectlombok:lombok-mapstruct-binding:${mapstructBindingVersion}")
        annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
        annotationProcessor ("org.projectlombok:lombok-mapstruct-binding:${mapstructBindingVersion}")

        // Lombok
        compileOnly("org.projectlombok:lombok")
        testCompileOnly("org.projectlombok:lombok")
        testAnnotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok")

        // Logging
        implementation("org.slf4j:slf4j-api")
        implementation("ch.qos.logback:logback-classic")

        // apache common
        implementation("org.apache.commons:commons-lang3:3.11")
        implementation("org.apache.commons:commons-collections4:4.4")

        // jackson
        implementation("com.fasterxml.jackson.core:jackson-databind")

        // srt-common
        implementation("com.myrealtrip.srt-common:srt-common-lib:0.0.26")
        // mrt3-common
        implementation("com.myrealtrip.common:mrt3-common:${mrtCommonVersion}")

        // unionstay-common
        implementation("com.myrealtrip.unionstay-common:unionstay-common:1.3.18.1-SNAPSHOT")

        // 단위 테스트는 JUnit 5를 사용합니다.
        testImplementation("org.junit.jupiter:junit-jupiter")
        testImplementation("org.junit.jupiter:junit-jupiter-migrationsupport")
        testRuntimeOnly("org.junit.platform:junit-platform-engine")

        // Assertions
        testImplementation("org.assertj:assertj-core")

        // mock library for java
        testImplementation("org.mockito:mockito-core")
        testImplementation ("org.mockito:mockito-inline")
        testImplementation("org.mockito:mockito-junit-jupiter")

        testImplementation("org.springframework.boot:spring-boot-starter-test")

        // slack-notifier
        implementation ('com.myrealtrip.slack:slack-notifier-client:0.0.4-SNAPSHOT')

        implementation("com.google.guava:guava:32.1.1-jre")
    }

    test {
        // Use junit platform for unit tests
        useJUnitPlatform()

        testLogging {
            "failed"
        }

        // systemProperty("spring.profiles.active", "test")
    }
}